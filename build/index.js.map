{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,cAAc,CAAC;AACrC,cAAc,cAAc,CAAC;AAE7B,MAAM,WAAY,SAAQ,KAAK;CAAG;AAElC,MAAM,aAAc,SAAQ,KAAK;CAAG;AAEpC;;;;;;;GAOG;AACH,SAAS,SAAS,CAAC,UAAkB,EAAE,eAAuB,KAAK,CAAC,GAAG;IACnE,IAAI,OAAO,UAAU,KAAK,QAAQ,EAAE,CAAC;QACjC,MAAM,IAAI,SAAS,CAAC,sBAAsB,OAAO,UAAU,EAAE,CAAC,CAAC;IACnE,CAAC;IACD,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,EAAE,CAAC;QACrB,MAAM,IAAI,KAAK,CAAC,GAAG,UAAU,WAAW,CAAC,CAAC;IAC9C,CAAC;IACD,OAAO,UAAU,CAAC,UAAU,CAAC,IAAI,EAAE,EAAE,YAAY,CAAC,CAAC;AACvD,CAAC;AAED,MAAM,UAAU,GAAG,CAAC,UAAkB,EAAE,KAAa,EAAE,EAAE;IACrD,MAAM,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC;IACjC,IAAI,KAAK,GAAG,CAAC,CAAC;IAEd,MAAM,eAAe,GAAG,CAAC,GAAW,EAAE,EAAE;QACpC,MAAM,IAAI,WAAW,CAAC,GAAG,GAAG,gBAAgB,KAAK,EAAE,CAAC,CAAC;IACzD,CAAC,CAAC;IAEF,MAAM,mBAAmB,GAAG,CAAC,GAAW,EAAE,EAAE;QACxC,MAAM,IAAI,aAAa,CAAC,GAAG,GAAG,gBAAgB,KAAK,EAAE,CAAC,CAAC;IAC3D,CAAC,CAAC;IAEF,MAAM,QAAQ,GAAc,GAAG,EAAE;QAC7B,SAAS,EAAE,CAAC;QACZ,IAAI,KAAK,IAAI,MAAM;YAAE,eAAe,CAAC,yBAAyB,CAAC,CAAC;QAChE,IAAI,UAAU,CAAC,KAAK,CAAC,KAAK,GAAG;YAAE,OAAO,QAAQ,EAAE,CAAC;QACjD,IAAI,UAAU,CAAC,KAAK,CAAC,KAAK,GAAG;YAAE,OAAO,QAAQ,EAAE,CAAC;QACjD,IAAI,UAAU,CAAC,KAAK,CAAC,KAAK,GAAG;YAAE,OAAO,QAAQ,EAAE,CAAC;QACjD,IAAI,UAAU,CAAC,SAAS,CAAC,KAAK,EAAE,KAAK,GAAG,CAAC,CAAC,KAAK,MAAM,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,KAAK,IAAI,MAAM,GAAG,KAAK,GAAG,CAAC,IAAI,MAAM,CAAC,UAAU,CAAC,UAAU,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC;YACpJ,KAAK,IAAI,CAAC,CAAC;YACX,OAAO,IAAI,CAAC;QAChB,CAAC;QACD,IAAI,UAAU,CAAC,SAAS,CAAC,KAAK,EAAE,KAAK,GAAG,CAAC,CAAC,KAAK,MAAM,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,KAAK,IAAI,MAAM,GAAG,KAAK,GAAG,CAAC,IAAI,MAAM,CAAC,UAAU,CAAC,UAAU,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC;YACpJ,KAAK,IAAI,CAAC,CAAC;YACX,OAAO,IAAI,CAAC;QAChB,CAAC;QACD,IAAI,UAAU,CAAC,SAAS,CAAC,KAAK,EAAE,KAAK,GAAG,CAAC,CAAC,KAAK,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,KAAK,IAAI,MAAM,GAAG,KAAK,GAAG,CAAC,IAAI,OAAO,CAAC,UAAU,CAAC,UAAU,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC;YACtJ,KAAK,IAAI,CAAC,CAAC;YACX,OAAO,KAAK,CAAC;QACjB,CAAC;QACD,IAAI,UAAU,CAAC,SAAS,CAAC,KAAK,EAAE,KAAK,GAAG,CAAC,CAAC,KAAK,UAAU,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,KAAK,IAAI,MAAM,GAAG,KAAK,GAAG,CAAC,IAAI,UAAU,CAAC,UAAU,CAAC,UAAU,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC;YAChK,KAAK,IAAI,CAAC,CAAC;YACX,OAAO,QAAQ,CAAC;QACpB,CAAC;QACD,IAAI,UAAU,CAAC,SAAS,CAAC,KAAK,EAAE,KAAK,GAAG,CAAC,CAAC,KAAK,WAAW,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,KAAK,IAAI,CAAC,GAAG,MAAM,GAAG,KAAK,IAAI,MAAM,GAAG,KAAK,GAAG,CAAC,IAAI,WAAW,CAAC,UAAU,CAAC,UAAU,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC;YACzL,KAAK,IAAI,CAAC,CAAC;YACX,OAAO,CAAC,QAAQ,CAAC;QACrB,CAAC;QACD,IAAI,UAAU,CAAC,SAAS,CAAC,KAAK,EAAE,KAAK,GAAG,CAAC,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,KAAK,IAAI,MAAM,GAAG,KAAK,GAAG,CAAC,IAAI,KAAK,CAAC,UAAU,CAAC,UAAU,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC;YACjJ,KAAK,IAAI,CAAC,CAAC;YACX,OAAO,GAAG,CAAC;QACf,CAAC;QACD,OAAO,QAAQ,EAAE,CAAC;IACtB,CAAC,CAAC;IAEF,MAAM,QAAQ,GAAiB,GAAG,EAAE;QAChC,MAAM,KAAK,GAAG,KAAK,CAAC;QACpB,IAAI,MAAM,GAAG,KAAK,CAAC;QACnB,KAAK,EAAE,CAAC,CAAC,qBAAqB;QAC9B,OAAO,KAAK,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,IAAI,UAAU,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,EAAE,CAAC;YACjG,MAAM,GAAG,UAAU,CAAC,KAAK,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC;YACtD,KAAK,EAAE,CAAC;QACZ,CAAC;QACD,IAAI,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,GAAG,EAAE,CAAC;YAClC,IAAI,CAAC;gBACD,OAAO,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,KAAK,EAAE,EAAE,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAC7E,CAAC;YAAC,OAAO,CAAC,EAAE,CAAC;gBACT,mBAAmB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;YACnC,CAAC;QACL,CAAC;aAAM,IAAI,KAAK,CAAC,GAAG,GAAG,KAAK,EAAE,CAAC;YAC3B,IAAI,CAAC;gBACD,OAAO,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,KAAK,EAAE,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;YACjF,CAAC;YAAC,OAAO,CAAC,EAAE,CAAC;gBACT,uCAAuC;gBACvC,OAAO,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,KAAK,EAAE,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;YACvF,CAAC;QACL,CAAC;QACD,eAAe,CAAC,6BAA6B,CAAC,CAAC;IACnD,CAAC,CAAC;IAEF,MAAM,QAAQ,GAAG,GAAG,EAAE;QAClB,KAAK,EAAE,CAAC,CAAC,qBAAqB;QAC9B,SAAS,EAAE,CAAC;QACZ,MAAM,GAAG,GAAwB,EAAE,CAAC;QACpC,IAAI,CAAC;YACD,OAAO,UAAU,CAAC,KAAK,CAAC,KAAK,GAAG,EAAE,CAAC;gBAC/B,SAAS,EAAE,CAAC;gBACZ,IAAI,KAAK,IAAI,MAAM,IAAI,KAAK,CAAC,GAAG,GAAG,KAAK;oBAAE,OAAO,GAAG,CAAC;gBACrD,MAAM,GAAG,GAAG,QAAQ,EAAE,CAAC;gBACvB,SAAS,EAAE,CAAC;gBACZ,KAAK,EAAE,CAAC,CAAC,aAAa;gBACtB,IAAI,CAAC;oBACD,MAAM,KAAK,GAAG,QAAQ,EAAE,CAAC;oBACzB,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;gBACrB,CAAC;gBAAC,OAAO,CAAC,EAAE,CAAC;oBACT,IAAI,KAAK,CAAC,GAAG,GAAG,KAAK;wBAAE,OAAO,GAAG,CAAC;;wBAC7B,MAAM,CAAC,CAAC;gBACjB,CAAC;gBACD,SAAS,EAAE,CAAC;gBACZ,IAAI,UAAU,CAAC,KAAK,CAAC,KAAK,GAAG;oBAAE,KAAK,EAAE,CAAC,CAAC,aAAa;YACzD,CAAC;QACL,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC;YACT,IAAI,KAAK,CAAC,GAAG,GAAG,KAAK;gBAAE,OAAO,GAAG,CAAC;;gBAC7B,eAAe,CAAC,+BAA+B,CAAC,CAAC;QAC1D,CAAC;QACD,KAAK,EAAE,CAAC,CAAC,mBAAmB;QAC5B,OAAO,GAAG,CAAC;IACf,CAAC,CAAC;IAEF,MAAM,QAAQ,GAAG,GAAG,EAAE;QAClB,KAAK,EAAE,CAAC,CAAC,uBAAuB;QAChC,MAAM,GAAG,GAAG,EAAE,CAAC;QACf,IAAI,CAAC;YACD,OAAO,UAAU,CAAC,KAAK,CAAC,KAAK,GAAG,EAAE,CAAC;gBAC/B,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;gBACrB,SAAS,EAAE,CAAC;gBACZ,IAAI,UAAU,CAAC,KAAK,CAAC,KAAK,GAAG,EAAE,CAAC;oBAC5B,KAAK,EAAE,CAAC,CAAC,aAAa;gBAC1B,CAAC;YACL,CAAC;QACL,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC;YACT,IAAI,KAAK,CAAC,GAAG,GAAG,KAAK,EAAE,CAAC;gBACpB,OAAO,GAAG,CAAC;YACf,CAAC;YACD,eAAe,CAAC,8BAA8B,CAAC,CAAC;QACpD,CAAC;QACD,KAAK,EAAE,CAAC,CAAC,qBAAqB;QAC9B,OAAO,GAAG,CAAC;IACf,CAAC,CAAC;IAEF,MAAM,QAAQ,GAAG,GAAG,EAAE;QAClB,IAAI,KAAK,KAAK,CAAC,EAAE,CAAC;YACd,IAAI,UAAU,KAAK,GAAG;gBAAE,mBAAmB,CAAC,sBAAsB,CAAC,CAAC;YACpE,IAAI,CAAC;gBACD,OAAO,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;YAClC,CAAC;YAAC,OAAO,CAAC,EAAE,CAAC;gBACT,IAAI,KAAK,CAAC,GAAG,GAAG,KAAK;oBACjB,IAAI,CAAC;wBACD,OAAO,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,EAAE,UAAU,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;oBAC5E,CAAC;oBAAC,OAAO,CAAC,EAAE,CAAC,CAAA,CAAC;gBAClB,mBAAmB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;YACnC,CAAC;QACL,CAAC;QAED,MAAM,KAAK,GAAG,KAAK,CAAC;QAEpB,IAAI,UAAU,CAAC,KAAK,CAAC,KAAK,GAAG;YAAE,KAAK,EAAE,CAAC;QACvC,OAAO,UAAU,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC;YAAE,KAAK,EAAE,CAAC;QAE7E,IAAI,KAAK,IAAI,MAAM,IAAI,CAAC,CAAC,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC;YAAE,eAAe,CAAC,6BAA6B,CAAC,CAAC;QAE5F,IAAI,CAAC;YACD,OAAO,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC;QAC1D,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC;YACT,IAAI,UAAU,CAAC,SAAS,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,GAAG;gBAAE,eAAe,CAAC,sBAAsB,CAAC,CAAC;YACxF,IAAI,CAAC;gBACD,OAAO,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,KAAK,EAAE,UAAU,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAChF,CAAC;YAAC,OAAO,CAAC,EAAE,CAAC;gBACT,mBAAmB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;YACnC,CAAC;QACL,CAAC;IACL,CAAC,CAAC;IAEF,MAAM,SAAS,GAAG,GAAG,EAAE;QACnB,OAAO,KAAK,GAAG,MAAM,IAAI,SAAS,CAAC,QAAQ,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC;YAC7D,KAAK,EAAE,CAAC;QACZ,CAAC;IACL,CAAC,CAAC;IACF,OAAO,QAAQ,EAAE,CAAC;AACtB,CAAC,CAAC;AAEF,MAAM,KAAK,GAAG,SAAS,CAAC;AAExB,OAAO,EAAE,KAAK,EAAE,SAAS,EAAE,WAAW,EAAE,aAAa,EAAE,KAAK,EAAE,CAAC","sourcesContent":["import { Allow } from \"./options.js\";\nexport * from \"./options.js\";\n\nclass PartialJSON extends Error {}\n\nclass MalformedJSON extends Error {}\n\n/**\n * Parse incomplete JSON\n * @param {string} jsonString Partial JSON to be parsed\n * @param {number} allowPartial Specify what types are allowed to be partial, see {@link Allow} for details\n * @returns The parsed JSON\n * @throws {PartialJSON} If the JSON is incomplete (related to the `allow` parameter)\n * @throws {MalformedJSON} If the JSON is malformed\n */\nfunction parseJSON(jsonString: string, allowPartial: number = Allow.ALL): any {\n    if (typeof jsonString !== \"string\") {\n        throw new TypeError(`expecting str, got ${typeof jsonString}`);\n    }\n    if (!jsonString.trim()) {\n        throw new Error(`${jsonString} is empty`);\n    }\n    return _parseJSON(jsonString.trim(), allowPartial);\n}\n\nconst _parseJSON = (jsonString: string, allow: number) => {\n    const length = jsonString.length;\n    let index = 0;\n\n    const markPartialJSON = (msg: string) => {\n        throw new PartialJSON(`${msg} at position ${index}`);\n    };\n\n    const throwMalformedError = (msg: string) => {\n        throw new MalformedJSON(`${msg} at position ${index}`);\n    };\n\n    const parseAny: () => any = () => {\n        skipBlank();\n        if (index >= length) markPartialJSON(\"Unexpected end of input\");\n        if (jsonString[index] === '\"') return parseStr();\n        if (jsonString[index] === \"{\") return parseObj();\n        if (jsonString[index] === \"[\") return parseArr();\n        if (jsonString.substring(index, index + 4) === \"null\" || (Allow.NULL & allow && length - index < 4 && \"null\".startsWith(jsonString.substring(index)))) {\n            index += 4;\n            return null;\n        }\n        if (jsonString.substring(index, index + 4) === \"true\" || (Allow.BOOL & allow && length - index < 4 && \"true\".startsWith(jsonString.substring(index)))) {\n            index += 4;\n            return true;\n        }\n        if (jsonString.substring(index, index + 5) === \"false\" || (Allow.BOOL & allow && length - index < 5 && \"false\".startsWith(jsonString.substring(index)))) {\n            index += 5;\n            return false;\n        }\n        if (jsonString.substring(index, index + 8) === \"Infinity\" || (Allow.INFINITY & allow && length - index < 8 && \"Infinity\".startsWith(jsonString.substring(index)))) {\n            index += 8;\n            return Infinity;\n        }\n        if (jsonString.substring(index, index + 9) === \"-Infinity\" || (Allow._INFINITY & allow && 1 < length - index && length - index < 9 && \"-Infinity\".startsWith(jsonString.substring(index)))) {\n            index += 9;\n            return -Infinity;\n        }\n        if (jsonString.substring(index, index + 3) === \"NaN\" || (Allow.NAN & allow && length - index < 3 && \"NaN\".startsWith(jsonString.substring(index)))) {\n            index += 3;\n            return NaN;\n        }\n        return parseNum();\n    };\n\n    const parseStr: () => string = () => {\n        const start = index;\n        let escape = false;\n        index++; // skip initial quote\n        while (index < length && (jsonString[index] !== '\"' || (escape && jsonString[index - 1] === \"\\\\\"))) {\n            escape = jsonString[index] === \"\\\\\" ? !escape : false;\n            index++;\n        }\n        if (jsonString.charAt(index) == '\"') {\n            try {\n                return JSON.parse(jsonString.substring(start, ++index - Number(escape)));\n            } catch (e) {\n                throwMalformedError(String(e));\n            }\n        } else if (Allow.STR & allow) {\n            try {\n                return JSON.parse(jsonString.substring(start, index - Number(escape)) + '\"');\n            } catch (e) {\n                // SyntaxError: Invalid escape sequence\n                return JSON.parse(jsonString.substring(start, jsonString.lastIndexOf(\"\\\\\")) + '\"');\n            }\n        }\n        markPartialJSON(\"Unterminated string literal\");\n    };\n\n    const parseObj = () => {\n        index++; // skip initial brace\n        skipBlank();\n        const obj: Record<string, any> = {};\n        try {\n            while (jsonString[index] !== \"}\") {\n                skipBlank();\n                if (index >= length && Allow.OBJ & allow) return obj;\n                const key = parseStr();\n                skipBlank();\n                index++; // skip colon\n                try {\n                    const value = parseAny();\n                    obj[key] = value;\n                } catch (e) {\n                    if (Allow.OBJ & allow) return obj;\n                    else throw e;\n                }\n                skipBlank();\n                if (jsonString[index] === \",\") index++; // skip comma\n            }\n        } catch (e) {\n            if (Allow.OBJ & allow) return obj;\n            else markPartialJSON(\"Expected '}' at end of object\");\n        }\n        index++; // skip final brace\n        return obj;\n    };\n\n    const parseArr = () => {\n        index++; // skip initial bracket\n        const arr = [];\n        try {\n            while (jsonString[index] !== \"]\") {\n                arr.push(parseAny());\n                skipBlank();\n                if (jsonString[index] === \",\") {\n                    index++; // skip comma\n                }\n            }\n        } catch (e) {\n            if (Allow.ARR & allow) {\n                return arr;\n            }\n            markPartialJSON(\"Expected ']' at end of array\");\n        }\n        index++; // skip final bracket\n        return arr;\n    };\n\n    const parseNum = () => {\n        if (index === 0) {\n            if (jsonString === \"-\") throwMalformedError(\"Not sure what '-' is\");\n            try {\n                return JSON.parse(jsonString);\n            } catch (e) {\n                if (Allow.NUM & allow)\n                    try {\n                        return JSON.parse(jsonString.substring(0, jsonString.lastIndexOf(\"e\")));\n                    } catch (e) {}\n                throwMalformedError(String(e));\n            }\n        }\n\n        const start = index;\n\n        if (jsonString[index] === \"-\") index++;\n        while (jsonString[index] && \",]}\".indexOf(jsonString[index]) === -1) index++;\n\n        if (index == length && !(Allow.NUM & allow)) markPartialJSON(\"Unterminated number literal\");\n\n        try {\n            return JSON.parse(jsonString.substring(start, index));\n        } catch (e) {\n            if (jsonString.substring(start, index) === \"-\") markPartialJSON(\"Not sure what '-' is\");\n            try {\n                return JSON.parse(jsonString.substring(start, jsonString.lastIndexOf(\"e\")));\n            } catch (e) {\n                throwMalformedError(String(e));\n            }\n        }\n    };\n\n    const skipBlank = () => {\n        while (index < length && \" \\n\\r\\t\".includes(jsonString[index])) {\n            index++;\n        }\n    };\n    return parseAny();\n};\n\nconst parse = parseJSON;\n\nexport { parse, parseJSON, PartialJSON, MalformedJSON, Allow };\n"]}