{"version":3,"file":"options.js","sourceRoot":"","sources":["../src/options.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;AAEH;;GAEG;AACH,MAAM,CAAC,MAAM,GAAG,GAAG,WAAW,CAAC;AAE/B;;GAEG;AACH,MAAM,CAAC,MAAM,GAAG,GAAG,WAAW,CAAC;AAE/B;;GAEG;AACH,MAAM,CAAC,MAAM,GAAG,GAAG,WAAW,CAAC;AAE/B;;GAEG;AACH,MAAM,CAAC,MAAM,GAAG,GAAG,WAAW,CAAC;AAE/B;;GAEG;AACH,MAAM,CAAC,MAAM,IAAI,GAAG,WAAW,CAAC;AAEhC;;GAEG;AACH,MAAM,CAAC,MAAM,IAAI,GAAG,WAAW,CAAC;AAEhC;;GAEG;AACH,MAAM,CAAC,MAAM,GAAG,GAAG,WAAW,CAAC;AAE/B;;GAEG;AACH,MAAM,CAAC,MAAM,QAAQ,GAAG,WAAW,CAAC;AAEpC;;GAEG;AACH,MAAM,CAAC,MAAM,SAAS,GAAG,WAAW,CAAC;AAErC,MAAM,CAAC,MAAM,GAAG,GAAG,QAAQ,GAAG,SAAS,CAAC;AACxC,MAAM,CAAC,MAAM,OAAO,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,CAAC;AAC/C,MAAM,CAAC,MAAM,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,OAAO,CAAC;AACxC,MAAM,CAAC,MAAM,UAAU,GAAG,GAAG,GAAG,GAAG,CAAC;AACpC,MAAM,CAAC,MAAM,GAAG,GAAG,IAAI,GAAG,UAAU,CAAC;AAErC;;;;;;;;;;;;;;;;;;;GAmBG;AACH,MAAM,CAAC,MAAM,KAAK,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,QAAQ,EAAE,SAAS,EAAE,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,GAAG,EAAE,CAAC;AAEvH,eAAe,KAAK,CAAC","sourcesContent":["/**\n * Sometimes you don't allow every type to be partially parsed.\n * For example, you may not want a partial number because it may increase its size gradually before it's complete.\n * In this case, you can use the `Allow` object to control what types you allow to be partially parsed.\n * @module\n */\n\n/**\n * allow partial strings like `\"hello \\u12` to be parsed as `\"hello \"`\n */\nexport const STR = 0b000000001;\n\n/**\n * allow partial numbers like `123.` to be parsed as `123`\n */\nexport const NUM = 0b000000010;\n\n/**\n * allow partial arrays like `[1, 2,` to be parsed as `[1, 2]`\n */\nexport const ARR = 0b000000100;\n\n/**\n * allow partial objects like `{\"a\": 1, \"b\":` to be parsed as `{\"a\": 1}`\n */\nexport const OBJ = 0b000001000;\n\n/**\n * allow `nu` to be parsed as `null`\n */\nexport const NULL = 0b000010000;\n\n/**\n * allow `tr` to be parsed as `true`, and `fa` to be parsed as `false`\n */\nexport const BOOL = 0b000100000;\n\n/**\n * allow `Na` to be parsed as `NaN`\n */\nexport const NAN = 0b001000000;\n\n/**\n * allow `Inf` to be parsed as `Infinity`\n */\nexport const INFINITY = 0b010000000;\n\n/**\n * allow `-Inf` to be parsed as `-Infinity`\n */\nexport const _INFINITY = 0b100000000;\n\nexport const INF = INFINITY | _INFINITY;\nexport const SPECIAL = NULL | BOOL | INF | NAN;\nexport const ATOM = STR | NUM | SPECIAL;\nexport const COLLECTION = ARR | OBJ;\nexport const ALL = ATOM | COLLECTION;\n\n/**\n * Control what types you allow to be partially parsed.\n * The default is to allow all types to be partially parsed, which in most casees is the best option.\n * @example\n * If you don't want to allow partial objects, you can use the following code:\n * ```ts\n * import { Allow, parse } from \"partial-json\";\n * parse(`[{\"a\": 1, \"b\": 2}, {\"a\": 3,`, Allow.ARR); // [ { a: 1, b: 2 } ]\n * ```\n * Or you can use `~` to disallow a type:\n * ```ts\n * parse(`[{\"a\": 1, \"b\": 2}, {\"a\": 3,`, ~Allow.OBJ); // [ { a: 1, b: 2 } ]\n * ```\n * @example\n * If you don't want to allow partial strings, you can use the following code:\n * ```ts\n * import { Allow, parse } from \"partial-json\";\n * parse(`[\"complete string\", \"incompl`, ~Allow.STR); // [ 'complete string' ]\n * ```\n */\nexport const Allow = { STR, NUM, ARR, OBJ, NULL, BOOL, NAN, INFINITY, _INFINITY, INF, SPECIAL, ATOM, COLLECTION, ALL };\n\nexport default Allow;\n"]}